# -*- coding: utf-8 -*-
"""Task1_Data_Cleaning_and_Preprocessing  .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dtbp3siIesL7MwSk3d84oanctfn1Gu5D
"""

import pandas as pd

sheets=pd.read_excel("Sales Dataset.xlsx",sheet_name=None)# To read the Excel sheet

sheets

# Assign Dataframes to each sheet
df_sales       = sheets['Sales Orders']
df_customers   = sheets['Customers']
df_products    = sheets['Products']
df_regions     = sheets['Regions']
df_state_reg   = sheets['State Regions']
df_budgets     = sheets['2017 Budgets']

# Display all the sheets shapes
print(f"df_sales      shape: {df_sales.shape}      # Sales Orders")
print(f"df_customers  shape: {df_customers.shape}  # Customers")
print(f"df_products   shape: {df_products.shape}   # Products")
print(f"df_regions    shape: {df_regions.shape}    # Regions")
print(f"df_state_reg  shape: {df_state_reg.shape}  # State Regions")
print(f"df_budgets    shape: {df_budgets.shape}    # 2017 Budgets")

# Check the heads of all DataFrames
print("\n— df_sales head —")
display(df_sales.head())
print()

print("\n— df_customers head —")
display(df_customers.head())
print()

print("\n— df_products head —")
display(df_products.head())
print()

print("\n— df_regions head —")
display(df_regions.head())
print()

print("\n— df_state_reg head —")
display(df_state_reg.head())
print()

print("\n— df_budgets head —")
display(df_budgets.head())

df_header=df_state_reg.iloc[0]
df_state_reg.columns=df_header
df_state_reg       = df_state_reg[1:].reset_index(drop=True)

df_state_reg.head(5)

# To check the NUll values of all the data sheets
df_sales.isnull().sum()

df_budgets.isnull().sum()

df_customers.isnull().sum()

df_budgets.isnull().sum()

# Merge with Sales and Customers, Let Join
df = df_sales.merge(
    df_customers,
    how='left',
    left_on='Customer Name Index',# FK of Sales
    right_on='Customer Index'# PK of Customers
)

df.head(5)

#Merge with the new dataset to products, LEFT Join
df = df.merge(
    df_products,
    how='left',
    left_on='Product Description Index',# FK of Sales
    right_on='Index'#PK of products
)

df.head(5)

#  Merge with Regions and the new dataset,LEFT join
df = df.merge(
    df_regions,
    how='left',
    left_on='Delivery Region Index',#Fk of sales
    right_on='id'# PK of Regions
)

df.head(5)

#  Merge with State Regions and the new dataset LEFT Join
df = df.merge(
    df_state_reg[["State Code","Region"]],# Take these two columns of the dataset because state is already present in our new dataset
    how='left',
    left_on='state_code',# FK of Sales
    right_on='State Code'#Pk of State region
)

df.head(5)

# Merge with Budgets
df = df.merge(
    df_budgets,
    how='left',
    on='Product Name'# here
)

df.head(5)

#Clean up Unnessery columns and auto-generated columns that don't need
cols_to_drop = [
    'Customer Index', 'Index', 'id', 'State Code',

]
df = df.drop(columns=cols_to_drop, errors='ignore')

df.head()

# Covert all the columns into lower case
df.columns = df.columns.str.lower()

# Display the updated list of column names
df.columns.values

# DROP UNNECESSARY COLUMNS & RENAME FOR CLARITY


# 1) List only the columns you want to KEEP
cols_to_keep = [
    'ordernumber',        # unique order ID
    'orderdate',          # date when the order was placed
    'customer names',     # customer who placed the order
    'channel',            # sales channel (e.g., Wholesale, Distributor)
    'product name',       # product purchased
    'order quantity',     # number of units ordered
    'unit price',         # price per unit
    'line total',         # revenue for this line item (qty × unit_price)
    'total unit cost',    # company’s cost for this line item
    'state_code',         # two-letter state code
    'state',              # full state name
    'region',                     # broader U.S. region (e.g., South, West)
    'latitude',           # latitude of delivery city
    'longitude',          # longitude of delivery city
    '2017 budgets'        # budget target for this product in 2017
]

# Subset the DataFrame to only these columns
df = df[cols_to_keep]

df.head(5)

# Rename to more Pythonic / self-explanatory names, including region
df = df.rename(columns={
    'ordernumber'      : 'order_number',   # snake_case for consistency
    'orderdate'        : 'order_date',     # date of the order
    'customer names'   : 'customer_name',  # customer who placed it
    'product name'     : 'product_name',   # product sold
    'order quantity'   : 'quantity',       # units sold
    'unit price'       : 'unit_price',     # price per unit in USD
    'line total'       : 'revenue',        # revenue for the line item
    'total unit cost'  : 'cost',           # cost for the line item
    'state_code'       : 'state',          # two-letter state code
    'state'            : 'state_name',     # full state name
    'region'         : 'us_region',                            # broader U.S. region
    'latitude'         : 'lat',            # latitude (float)
    'longitude'        : 'lon',            # longitude (float)
    '2017 budgets'     : 'budget'          # 2017 budget target (float)
})

# Display the cleaned DataFrame structure
df.head()

# Blank out budgets for non-2017 orders
df.loc[df['order_date'].dt.year != 2017, 'budget'] = pd.NA

# Inspect
df[['order_date','product_name','revenue','budget']].head(10)

df.info()

#Filter the dataset to include only records from year 2017
df_2017=df[df['order_date'].dt.year==2017]

df.isnull().sum()

df_2017.head()

